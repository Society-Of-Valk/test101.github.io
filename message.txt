<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Society of Valk XP - Code Redemption</title>
  <!-- Include Tailwind CSS -->
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- Include React, React DOM, and other dependencies -->
  <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
  <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
  <script src="https://unpkg.com/@tanstack/react-query@5.8.4/build/umd/index.production.js"></script>
  <script src="https://unpkg.com/wouter/umd/wouter.min.js"></script>
  <script src="https://unpkg.com/zod@3.22.4/lib/index.umd.js"></script>
  <script src="https://unpkg.com/lucide-react@0.294.0/dist/umd/lucide-react.min.js"></script>
  <script src="https://unpkg.com/date-fns@2.30.0/index.js"></script>
</head>
<body class="bg-gray-100 min-h-screen">
  <div id="root"></div>

  <script type="module">
    // Import dependencies from global scope
    const { useState, useEffect, createContext, useContext, useRef } = React;
    const { createRoot } = ReactDOM;
    const { QueryClient, QueryClientProvider, useQuery, useMutation } = ReactQuery;
    const { Route, Switch, Link, useLocation, Redirect } = wouter;
    const { Loader2, CheckCircle, XCircle, Clock, Code2, LogOut, User } = lucideReact;
    const { format } = dateFns;

    // Schema definitions
    const validateAdminSchema = zod.object({
      password: zod.string().min(1, "Password is required"),
    });

    const loginFormSchema = zod.object({
      username: zod.string().min(3, "Username must be at least 3 characters"),
      password: zod.string().min(6, "Password must be at least 6 characters"),
    });

    const registerFormSchema = zod.object({
      username: zod.string().min(3, "Username must be at least 3 characters"),
      password: zod.string().min(6, "Password must be at least 6 characters"),
      email: zod.string().email("Please enter a valid email address"),
      discordUsername: zod.string().min(3, "Discord username is required"),
    });

    const redeemCodeSchema = zod.object({
      code: zod.string().min(1, "Code is required").max(50),
    });

    const generateCodesSchema = zod.object({
      prefix: zod.string().min(1, "Prefix is required"),
      count: zod.number().int().min(1).max(100),
      reward: zod.string().min(1, "Reward is required"),
      expiresAt: zod.string().min(1, "Expiration date is required"),
      pattern: zod.enum(["random", "sequential"]),
      maxRedemptions: zod.number().int().min(1).max(100),
    });

    // Mock Admin Credentials
    const adminCredentials = {
      password: "admin123"
    };

    // Query client setup
    const queryClient = new QueryClient({
      defaultOptions: {
        queries: {
          refetchOnWindowFocus: false,
          retry: 1,
        },
      },
    });

    // Mock Data
    const mockUsers = [
      { id: 1, username: "john_doe", email: "john@example.com", discordUsername: "john#1234", password: "password123" },
      { id: 2, username: "jane_smith", email: "jane@example.com", discordUsername: "jane#5678", password: "password123" },
    ];

    const mockCodes = [
      { id: 1, code: "VALID123", reward: "100 XP", expiresAt: "2026-12-31", isActive: true, timesRedeemed: 3, maxRedemptions: 10 },
      { id: 2, code: "WELCOME50", reward: "50 XP", expiresAt: "2025-06-30", isActive: true, timesRedeemed: 2, maxRedemptions: 5 },
      { id: 3, code: "EVENT2023", reward: "200 XP", expiresAt: "2024-01-31", isActive: false, timesRedeemed: 5, maxRedemptions: 5 },
    ];

    const mockStats = {
      totalRedemptions: 10,
      activeCodes: 2,
      failedAttempts: 3,
    };

    const mockRedemptions = [
      { 
        id: 1, 
        codeId: 1, 
        redeemedAt: "2023-11-15T10:30:00Z", 
        status: "success", 
        code: "VALID123", 
        userId: 1, 
        user: { id: 1, username: "john_doe", email: "john@example.com", discordUsername: "john#1234" } 
      },
      { 
        id: 2, 
        codeId: 2, 
        redeemedAt: "2023-11-14T15:45:00Z", 
        status: "success", 
        code: "WELCOME50", 
        userId: 2, 
        user: { id: 2, username: "jane_smith", email: "jane@example.com", discordUsername: "jane#5678" } 
      },
      { 
        id: 3, 
        codeId: 3, 
        redeemedAt: "2023-11-13T08:20:00Z", 
        status: "failed", 
        code: "EXPIRED20", 
        userId: 1, 
        user: { id: 1, username: "john_doe", email: "john@example.com", discordUsername: "john#1234" } 
      },
    ];

    // API Request Helper
    async function apiRequest(method, url, data) {
      // In a real app, this would make actual API calls
      // For this demo, we'll simulate responses based on the URL
      
      const delay = ms => new Promise(resolve => setTimeout(resolve, ms));
      await delay(500); // Simulate network latency
      
      // Authentication endpoints
      if (url === "/api/login") {
        const { username, password } = data;
        const user = mockUsers.find(u => u.username === username && u.password === password);
        if (user) {
          const { password, ...userWithoutPassword } = user;
          return { 
            ok: true,
            json: async () => userWithoutPassword
          };
        }
        throw new Error("Invalid username or password");
      }
      
      if (url === "/api/register") {
        if (mockUsers.some(u => u.username === data.username)) {
          throw new Error("Username already exists");
        }
        if (mockUsers.some(u => u.email === data.email)) {
          throw new Error("Email already in use");
        }
        
        const newUser = {
          id: mockUsers.length + 1,
          ...data
        };
        const { password, ...userWithoutPassword } = newUser;
        mockUsers.push(newUser);
        return {
          ok: true,
          json: async () => userWithoutPassword
        };
      }
      
      if (url === "/api/logout") {
        return { ok: true, json: async () => ({ success: true }) };
      }
      
      if (url === "/api/user") {
        const currentUser = JSON.parse(sessionStorage.getItem("currentUser"));
        if (!currentUser) {
          return { 
            ok: false, 
            status: 401,
            json: async () => ({ message: "Not authenticated" })
          };
        }
        return {
          ok: true,
          json: async () => currentUser
        };
      }
      
      // Admin endpoints
      if (url === "/api/admin/login") {
        if (data.password === adminCredentials.password) {
          return { ok: true, json: async () => ({ success: true }) };
        }
        return { 
          ok: false, 
          status: 401,
          json: async () => ({ message: "Invalid password" })
        };
      }
      
      if (url === "/api/admin/logout") {
        return { ok: true, json: async () => ({ success: true }) };
      }
      
      if (url === "/api/admin/auth-check") {
        return { 
          ok: true, 
          json: async () => ({ isAdmin: sessionStorage.getItem("admin") === "true" }) 
        };
      }
      
      if (url.startsWith("/api/admin/codes")) {
        if (url.includes("/toggle") && method === "PATCH") {
          const id = parseInt(url.split('/').pop());
          return {
            ok: true,
            json: async () => ({ success: true })
          };
        }
        
        return {
          ok: true,
          json: async () => mockCodes
        };
      }
      
      if (url === "/api/admin/stats") {
        return {
          ok: true,
          json: async () => mockStats
        };
      }
      
      if (url === "/api/admin/redemptions") {
        return {
          ok: true,
          json: async () => mockRedemptions
        };
      }
      
      // Code redemption endpoint
      if (url === "/api/redeem") {
        const code = mockCodes.find(c => c.code === data.code);
        if (!code) {
          return {
            ok: true,
            json: async () => ({
              success: false,
              message: "Code not found. Please check and try again."
            })
          };
        }
        
        if (!code.isActive) {
          return {
            ok: true,
            json: async () => ({
              success: false,
              message: "This code is not active."
            })
          };
        }
        
        if (code.timesRedeemed >= code.maxRedemptions) {
          return {
            ok: true,
            json: async () => ({
              success: false,
              message: "This code has reached its maximum redemption limit."
            })
          };
        }
        
        const now = new Date();
        const expiryDate = new Date(code.expiresAt);
        if (now > expiryDate) {
          return {
            ok: true,
            json: async () => ({
              success: false,
              message: "This code has expired."
            })
          };
        }
        
        // Success case
        code.timesRedeemed++;
        return {
          ok: true,
          json: async () => ({
            success: true,
            message: "Code successfully redeemed!",
            reward: code.reward,
            code: {
              timesRedeemed: code.timesRedeemed,
              maxRedemptions: code.maxRedemptions
            }
          })
        };
      }
      
      // Default response for unknown endpoints
      return {
        ok: false,
        status: 404,
        json: async () => ({ message: "Endpoint not found" })
      };
    }

    // Toast Component (simplified)
    const ToastContext = createContext({ toast: () => {} });

    function ToastProvider({ children }) {
      const [toasts, setToasts] = useState([]);

      const toast = ({ title, description, variant = "default" }) => {
        const id = Date.now();
        setToasts(prev => [...prev, { id, title, description, variant }]);
        setTimeout(() => {
          setToasts(prev => prev.filter(t => t.id !== id));
        }, 3000);
      };

      return (
        <ToastContext.Provider value={{ toast }}>
          {children}
          <div className="fixed top-4 right-4 z-50 flex flex-col gap-2">
            {toasts.map(t => (
              <div key={t.id} className={`p-4 rounded-md shadow-md ${
                t.variant === 'destructive' ? 'bg-red-100 border border-red-400 text-red-700' :
                'bg-white border border-gray-200'
              }`}>
                <div className="font-medium">{t.title}</div>
                <div className="text-sm">{t.description}</div>
              </div>
            ))}
          </div>
        </ToastContext.Provider>
      );
    }

    const useToast = () => useContext(ToastContext);

    // Auth Context
    const AuthContext = createContext({
      user: null,
      isLoading: true,
      error: null,
      loginMutation: null,
      logoutMutation: null,
      registerMutation: null,
    });

    function AuthProvider({ children }) {
      const { toast } = useToast();
      
      const {
        data: userData,
        error,
        isLoading,
      } = useQuery({
        queryKey: ["/api/user"],
        queryFn: async () => {
          try {
            // Check if we have a stored user
            const currentUser = JSON.parse(sessionStorage.getItem("currentUser"));
            return currentUser;
          } catch (error) {
            return null;
          }
        },
      });
      
      const loginMutation = useMutation({
        mutationFn: async (credentials) => {
          const response = await apiRequest("POST", "/api/login", credentials);
          return response.json();
        },
        onSuccess: (user) => {
          // Store user in session storage
          sessionStorage.setItem("currentUser", JSON.stringify(user));
          queryClient.setQueryData(["/api/user"], user);
          toast({
            title: "Login successful",
            description: `Welcome back, ${user.username}!`,
          });
        },
        onError: (error) => {
          toast({
            title: "Login failed",
            description: error.message || "Invalid username or password",
            variant: "destructive",
          });
        },
      });
      
      const registerMutation = useMutation({
        mutationFn: async (userData) => {
          const response = await apiRequest("POST", "/api/register", userData);
          return response.json();
        },
        onSuccess: (user) => {
          // Store user in session storage
          sessionStorage.setItem("currentUser", JSON.stringify(user));
          queryClient.setQueryData(["/api/user"], user);
          toast({
            title: "Registration successful",
            description: `Welcome, ${user.username}!`,
          });
        },
        onError: (error) => {
          toast({
            title: "Registration failed",
            description: error.message || "Could not create account",
            variant: "destructive",
          });
        },
      });
      
      const logoutMutation = useMutation({
        mutationFn: async () => {
          const response = await apiRequest("POST", "/api/logout");
          return response.json();
        },
        onSuccess: () => {
          // Clear user from session storage
          sessionStorage.removeItem("currentUser");
          queryClient.setQueryData(["/api/user"], null);
          toast({
            title: "Logged out",
            description: "You have been successfully logged out.",
          });
        },
        onError: (error) => {
          toast({
            title: "Error",
            description: "Failed to log out. Please try again.",
            variant: "destructive",
          });
        },
      });
      
      return (
        <AuthContext.Provider
          value={{
            user: userData,
            isLoading,
            error,
            loginMutation,
            logoutMutation,
            registerMutation,
          }}
        >
          {children}
        </AuthContext.Provider>
      );
    }

    const useAuth = () => useContext(AuthContext);

    // Admin Context
    const AdminContext = createContext({
      isAdmin: false,
      isLoading: true,
      login: async () => {},
      logout: async () => {},
    });

    function AdminProvider({ children }) {
      const [isAdmin, setIsAdmin] = useState(false);
      const [, navigate] = useLocation();
      const { toast } = useToast();
      
      // Check if user is admin
      const { data, isLoading } = useQuery({
        queryKey: ["/api/admin/auth-check"],
        queryFn: async () => {
          try {
            const isAdmin = sessionStorage.getItem("admin") === "true";
            return { isAdmin };
          } catch (error) {
            return { isAdmin: false };
          }
        },
        onError: () => {
          setIsAdmin(false);
        },
      });
      
      useEffect(() => {
        if (data) {
          setIsAdmin(data.isAdmin);
        }
      }, [data]);
      
      // Login mutation
      const loginMutation = useMutation({
        mutationFn: async (password) => {
          return apiRequest("POST", "/api/admin/login", { password });
        },
        onSuccess: () => {
          sessionStorage.setItem("admin", "true");
          setIsAdmin(true);
          navigate("/admin/manage");
          toast({
            title: "Login successful",
            description: "You are now logged in as admin.",
          });
        },
        onError: (error) => {
          toast({
            title: "Login failed",
            description: error.message || "Invalid password",
            variant: "destructive",
          });
        },
      });
      
      // Logout mutation
      const logoutMutation = useMutation({
        mutationFn: async () => {
          return apiRequest("POST", "/api/admin/logout");
        },
        onSuccess: () => {
          sessionStorage.removeItem("admin");
          setIsAdmin(false);
          navigate("/");
          toast({
            title: "Logged out",
            description: "You have been logged out of admin panel successfully.",
          });
        },
        onError: () => {
          toast({
            title: "Error",
            description: "Failed to log out. Please try again.",
            variant: "destructive",
          });
        },
      });
      
      const login = async (password) => {
        await loginMutation.mutateAsync(password);
      };
      
      const logout = async () => {
        await logoutMutation.mutateAsync();
      };
      
      return (
        <AdminContext.Provider value={{ isAdmin, isLoading, login, logout }}>
          {children}
        </AdminContext.Provider>
      );
    }

    const useAdmin = () => useContext(AdminContext);

    // UI Components
    // UI Components
    const Card = ({ children, className = "" }) => (
      <div className={`bg-white overflow-hidden shadow rounded-lg ${className}`}>
        {children}
      </div>
    );

    const CardHeader = ({ children, className = "" }) => (
      <div className={`px-4 py-5 sm:px-6 ${className}`}>
        {children}
      </div>
    );

    const CardTitle = ({ children, className = "" }) => (
      <h3 className={`text-lg leading-6 font-medium text-gray-900 ${className}`}>
        {children}
      </h3>
    );

    const CardDescription = ({ children, className = "" }) => (
      <p className={`mt-1 max-w-2xl text-sm text-gray-500 ${className}`}>
        {children}
      </p>
    );

    const CardContent = ({ children, className = "" }) => (
      <div className={`px-4 py-5 sm:p-6 ${className}`}>
        {children}
      </div>
    );

    const CardFooter = ({ children, className = "" }) => (
      <div className={`px-4 py-4 sm:px-6 ${className}`}>
        {children}
      </div>
    );

    const Badge = ({ children, variant = "default", className = "" }) => {
      const variants = {
        default: "bg-blue-100 text-blue-800",
        outline: "bg-white border border-gray-300 text-gray-700",
        success: "bg-green-100 text-green-800",
        destructive: "bg-red-100 text-red-800",
      };

      return (
        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${variants[variant]} ${className}`}>
          {children}
        </span>
      );
    };

    const Input = ({ className = "", ...props }) => (
      <input
        className={`block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm ${className}`}
        {...props}
      />
    );

    const Button = ({ 
      children, 
      variant = "default", 
      size = "default", 
      className = "", 
      ...props 
    }) => {
      const variants = {
        default: "bg-blue-600 text-white hover:bg-blue-700",
        outline: "bg-white border border-gray-300 text-gray-700 hover:bg-gray-50",
        destructive: "bg-red-600 text-white hover:bg-red-700",
      };

      const sizes = {
        default: "px-4 py-2",
        sm: "px-2 py-1 text-sm",
        lg: "px-6 py-3 text-lg",
      };

      return (
        <button
          className={`inline-flex justify-center items-center rounded-md shadow-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 ${variants[variant]} ${sizes[size]} ${className}`}
          {...props}
        >
          {children}
        </button>
      );
    };

    const Alert = ({ children, variant = "default", className = "" }) => {
      const variants = {
        default: "bg-blue-50 text-blue-800 border-blue-200",
        destructive: "bg-red-50 text-red-800 border-red-200",
      };

      return (
        <div className={`border rounded-md p-4 ${variants[variant]} ${className}`}>
          {children}
        </div>
      );
    };

    const AlertTitle = ({ children, className = "" }) => (
      <h3 className={`text-sm font-medium ${className}`}>{children}</h3>
    );

    const AlertDescription = ({ children, className = "" }) => (
      <div className={`mt-2 text-sm ${className}`}>{children}</div>
    );

    // Form components (simplified)
    const Form = ({ children }) => children;
    
    const FormField = ({ render }) => render({ field: { onChange: (e) => {}, value: "" } });
    
    const FormItem = ({ children }) => <div className="space-y-1">{children}</div>;
    
    const FormLabel = ({ children }) => (
      <label className="block text-sm font-medium text-gray-700">{children}</label>
    );
    
    const FormControl = ({ children }) => children;
    
    const FormMessage = () => null;
    
    const FormDescription = ({ children }) => (
      <p className="text-sm text-gray-500 mt-1">{children}</p>
    );

    // Tabs components
    const Tabs = ({ children, value, onValueChange }) => {
      return (
        <div className="w-full">
          {React.Children.map(children, child => 
            React.cloneElement(child, { value, onValueChange })
          )}
        </div>
      );
    };

    const TabsList = ({ children, className = "" }) => (
      <div className={`flex space-x-1 rounded-lg bg-gray-100 p-1 ${className}`}>
        {children}
      </div>
    );

    const TabsTrigger = ({ children, value, onValueChange, currentValue }) => (
      <button
        className={`px-3 py-1.5 text-sm font-medium rounded-md transition-colors focus:outline-none ${
          currentValue === value 
            ? "bg-white text-blue-700 shadow"
            : "text-gray-600 hover:text-blue-700"
        }`}
        onClick={() => onValueChange(value)}
      >
        {children}
      </button>
    );

    const TabsContent = ({ children, value, currentValue }) => {
      if (value !== currentValue) return null;
      return <div>{children}</div>;
    };

    // Select Components (simplified)
    const Select = ({ children, onValueChange, defaultValue }) => {
      const [value, setValue] = useState(defaultValue);
      const handleChange = (e) => {
        setValue(e.target.value);
        onValueChange(e.target.value);
      };
      
      return (
        <select
          value={value}
          onChange={handleChange}
          className="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
        >
          {React.Children.map(children, child => 
            React.cloneElement(child, { value })
          )}
        </select>
      );
    };

    const SelectTrigger = ({ children }) => children;
    const SelectValue = () => null;
    const SelectContent = ({ children }) => children;
    const SelectItem = ({ value, children }) => (
      <option value={value}>{children}</option>
    );

    // Dropdown Menu components (simplified)
    const DropdownMenu = ({ children }) => {
      const [isOpen, setIsOpen] = useState(false);
      return (
        <div className="relative inline-block text-left">
          {React.Children.map(children, child => 
            React.cloneElement(child, { isOpen, setIsOpen })
          )}
        </div>
      );
    };

    const DropdownMenuTrigger = ({ children, isOpen, setIsOpen, asChild }) => {
      if (asChild) {
        return React.cloneElement(children, {
          onClick: () => setIsOpen(!isOpen),
        });
      }
      return (
        <button onClick={() => setIsOpen(!isOpen)}>
          {children}
        </button>
      );
    };

    const DropdownMenuContent = ({ children, isOpen, align = "left", className = "" }) => {
      if (!isOpen) return null;
      return (
        <div className={`absolute z-10 mt-2 rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none ${
          align === "right" ? "right-0" : "left-0"
        } ${className}`}>
          <div className="py-1">{children}</div>
        </div>
      );
    };

    const DropdownMenuItem = ({ children, onClick, className = "" }) => (
      <button
        className={`flex w-full items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 ${className}`}
        onClick={onClick}
      >
        {children}
      </button>
    );

    const DropdownMenuLabel = ({ children, className = "" }) => (
      <div className={`px-4 py-2 text-sm font-medium text-gray-900 ${className}`}>
        {children}
      </div>
    );

    const DropdownMenuSeparator = () => (
      <div className="my-1 h-px bg-gray-200" />
    );

    // Avatar components
    const Avatar = ({ children, className = "" }) => (
      <div className={`relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full ${className}`}>
        {children}
      </div>
    );

    const AvatarFallback = ({ children, className = "" }) => (
      <div className={`flex h-full w-full items-center justify-center rounded-full bg-gray-200 ${className}`}>
        {children}
      </div>
    );

    // Routing components
    function ProtectedRoute({ path, component: Component }) {
      const { user, isLoading } = useAuth();

      if (isLoading) {
        return (
          <Route path={path}>
            <div className="flex items-center justify-center min-h-screen">
              <span className="animate-spin h-8 w-8 text-blue-500">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              </span>
            </div>
          </Route>
        );
      }

      if (!user) {
        return (
          <Route path={path}>
            <Redirect to="/auth" />
          </Route>
        );
      }

      return <Route path={path} component={Component} />;
    }

    function AdminRoute({ path, children }) {
      const { isAdmin, isLoading } = useAdmin();
      const [, navigate] = useLocation();

      useEffect(() => {
        if (!isLoading && !isAdmin) {
          navigate("/admin/login");
        }
      }, [isAdmin, isLoading, navigate]);

      return <Route path={path}>{isAdmin ? children : null}</Route>;
    }

    // Navigation Components
    function Header() {
      const [location] = useLocation();
      const { isAdmin, logout: logoutAdmin } = useAdmin();
      const { user, logoutMutation } = useAuth();
      
      const isAdminPage = location.startsWith("/admin");

      const handleLogout = () => {
        logoutMutation.mutate();
      };

      const getInitials = (name) => {
        return name.substring(0, 2).toUpperCase();
      };

      return (
        <header className="bg-gradient-to-r from-blue-600 to-blue-500 shadow-md">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between h-16">
              <div className="flex items-center">
                <Link href="/" className="flex-shrink-0 flex items-center">
                  <svg className="h-8 w-8 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" />
                  </svg>
                  <span className="ml-2 text-xl font-bold text-white">Society of Valk XP</span>
                </Link>
              </div>
              
              <div className="flex items-center space-x-4">
                {user ? (
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" className="relative h-8 w-8 rounded-full">
                        <Avatar className="h-8 w-8 bg-blue-300 hover:bg-blue-200">
                          <AvatarFallback className="text-blue-800">
                            {getInitials(user.username)}
                          </AvatarFallback>
                        </Avatar>
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent className="w-56" align="end">
                      <DropdownMenuLabel className="font-normal">
                        <div className="flex flex-col space-y-1">
                          <p className="text-sm font-medium leading-none">{user.username}</p>
                          <p className="text-xs leading-none text-gray-500 truncate">
                            {user.email}
                          </p>
                          <p className="text-xs leading-none text-gray-500">
                            {user.discordUsername}
                          </p>
                        </div>
                      </DropdownMenuLabel>
                      <DropdownMenuSeparator />
                      <DropdownMenuItem onClick={handleLogout}>
                        <svg className="mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                        </svg>
                        <span>Log out</span>
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                ) : (
                  <Button
                    variant="outline"
                    asChild
                    className="bg-white text-blue-600 hover:bg-blue-50 border-white"
                  >
                    <Link href="/auth">Log In</Link>
                  </Button>
                )}
                
                {isAdmin ? (
                  <Button
                    variant="outline"
                    onClick={() => logoutAdmin()}
                    className="bg-white text-blue-600 hover:bg-blue-50 border-white"
                  >
                    Exit Admin
                  </Button>
                ) : (
                  <Button
                    variant="outline"
                    asChild
                    className="bg-white text-blue-600 hover:bg-blue-50 border-white"
                  >
                    <Link href="/admin/login">Admin Login</Link>
                  </Button>
                )}
              </div>
            </div>
          </div>
        </header>
      );
    }

    function TabNavigation() {
      const [location] = useLocation();
      
      const Tab = ({ href, label, active }) => {
        const baseClasses = "whitespace-nowrap py-4 px-4 border-b-2 font-medium text-sm transition-colors duration-200";
        const activeClasses = active 
          ? "border-white text-white" 
          : "border-transparent text-blue-100 hover:text-white hover:border-blue-200";
        
        return (
          <Link href={href} className={`${baseClasses} ${activeClasses}`}>
            {label}
          </Link>
        );
      };
      
      return (
        <div className="bg-blue-600">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="border-b border-blue-500">
              <nav className="-mb-px flex space-x-8">
                <Tab href="/" label="Redeem Code" active={location === "/"} />
                <Tab href="/faq" label="FAQ" active={location === "/faq"} />
              </nav>
            </div>
          </div>
        </div>
      );
    }

    function AdminTabNavigation() {
      const [location] = useLocation();
      
      const Tab = ({ href, label, active }) => {
        const baseClasses = "whitespace-nowrap py-4 px-4 border-b-2 font-medium text-sm transition-colors duration-200";
        const activeClasses = active 
          ? "border-blue-600 text-blue-600" 
          : "border-transparent text-gray-600 hover:text-blue-500 hover:border-blue-300";
        
        return (
          <Link href={href} className={`${baseClasses} ${activeClasses}`}>
            {label}
          </Link>
        );
      };
      
      return (
        <div className="bg-white shadow-sm">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="border-b border-gray-200">
              <nav className="-mb-px flex space-x-8">
                <Tab 
                  href="/admin/manage" 
                  label="Manage Codes" 
                  active={location === "/admin/manage"} 
                />
                <Tab 
                  href="/admin/stats" 
                  label="Redemption Stats" 
                  active={location === "/admin/stats"} 
                />
                <Tab 
                  href="/admin/add" 
                  label="Add New Codes" 
                  active={location === "/admin/add"} 
                />
              </nav>
            </div>
          </div>
        </div>
      );
    }

    function Footer() {
      return (
        <footer className="bg-white">
          <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
            <div className="md:flex md:items-center md:justify-between">
              <div className="flex justify-center md:order-2">
                <Link href="#" className="text-gray-400 hover:text-gray-500">
                  <span className="sr-only">Support</span>
                  <span className="text-sm text-gray-500">Contact Support</span>
                </Link>
              </div>
              <div className="mt-8 md:mt-0 md:order-1">
                <p className="text-center text-sm text-gray-500">
                  &copy; {new Date().getFullYear()} Society of Valk XP. All rights reserved.
                </p>
              </div>
            </div>
          </div>
        </footer>
      );
    }

    // Page Components
    function Home() {
      const { user } = useAuth();

      return (
        <>
          <TabNavigation />
          <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-10">
            {user && (
              <Card className="mb-8 bg-gradient-to-br from-blue-50 to-white">
                <CardHeader>
                  <CardTitle className="text-2xl">Welcome, {user.username}!</CardTitle>
                  <CardDescription>
                    You can redeem codes with your account. All your redemptions will be tracked.
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="flex flex-col space-y-1">
                      <span className="text-sm font-medium text-gray-500">Email</span>
                      <span>{user.email}</span>
                    </div>
                    <div className="flex flex-col space-y-1">
                      <span className="text-sm font-medium text-gray-500">Discord Username</span>
                      <span>{user.discordUsername}</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}
            <CodeRedemptionForm />
          </main>
        </>
      );
    }

    function CodeRedemptionForm() {
      const [result, setResult] = useState(null);
      const [code, setCode] = useState("");
      const { toast } = useToast();
      
      const redeemMutation = useMutation({
        mutationFn: async (values) => {
          const response = await apiRequest("POST", "/api/redeem", {
            code: values.code.toUpperCase(),
          });
          return response.json();
        },
        onSuccess: (data) => {
          setResult(data);
          if (data.success) {
            setCode("");
          }
        },
        onError: (error) => {
          setResult({
            success: false,
            message: error.message || "An error occurred while processing your request.",
          });
        },
      });
      
      const handleSubmit = (e) => {
        e.preventDefault();
        if (!code) {
          toast({
            title: "Error",
            description: "Please enter a code",
            variant: "destructive",
          });
          return;
        }
        redeemMutation.mutate({ code });
      };
      
      return (
        <div className="max-w-md mx-auto">
          <div className="bg-white shadow-lg overflow-hidden rounded-xl border border-blue-100">
            <div className="px-6 py-6 bg-gradient-to-r from-blue-50 to-white">
              <h3 className="text-xl leading-6 font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-blue-400">
                Redeem Your Valk XP Code
              </h3>
              <p className="mt-1 max-w-2xl text-sm text-gray-600">
                Enter your redemption code below to claim Valk XP and other exclusive rewards.
              </p>
            </div>
            <div className="border-t border-blue-100 px-6 py-6">
              <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">Redemption Code</label>
                  <input
                    type="text"
                    value={code.toUpperCase()}
                    onChange={(e) => setCode(e.target.value)}
                    placeholder="Enter your code (e.g., VALID123)"
                    className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm uppercase"
                    disabled={redeemMutation.isPending}
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Codes are case-insensitive and should not contain spaces.
                  </p>
                </div>
                
                {/* Result Alerts */}
                {result && (
                  <Alert
                    variant={result.success ? "default" : "destructive"}
                    className={result.success ? "bg-green-50" : "bg-red-50"}
                  >
                    <div className="flex items-start">
                      {result.success ? (
                        <svg className="h-5 w-5 text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                        </svg>
                      ) : (
                        <svg className="h-5 w-5 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                        </svg>
                      )}
                      <div className="ml-3">
                        <AlertTitle className={result.success ? "text-green-800" : "text-red-800"}>
                          {result.success ? "Success!" : "Error"}
                        </AlertTitle>
                        <AlertDescription className={result.success ? "text-green-700" : "text-red-700"}>
                          <p>{result.message}</p>
                          {result.success && result.reward && (
                            <p className="font-semibold mt-1">Reward: {result.reward}</p>
                          )}
                          {result.success && result.code && result.code.maxRedemptions > 1 && (
                            <p className="text-xs mt-1">
                              This code has been used {result.code.timesRedeemed} of {result.code.maxRedemptions} times
                              {result.code.timesRedeemed < result.code.maxRedemptions && " and can be redeemed again"}
                            </p>
                          )}
                        </AlertDescription>
                      </div>
                    </div>
                  </Alert>
                )}
                
                <div className="flex justify-end">
                  <Button
                    type="submit"
                    disabled={redeemMutation.isPending}
                    className="bg-gradient-to-r from-blue-600 to-blue-500 hover:from-blue-700 hover:to-blue-600 text-white font-medium px-6"
                  >
                    {redeemMutation.isPending && (
                      <span className="mr-2">
                        <svg className="animate-spin h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                      </span>
                    )}
                    {redeemMutation.isPending ? "Validating..." : "Redeem Code"}
                  </Button>
                </div>
              </form>
            </div>
          </div>
        </div>
      );
    }

    function AuthPage() {
      const { user, isLoading, loginMutation, registerMutation } = useAuth();
      const [activeTab, setActiveTab] = useState("login");
      
      // If user is already logged in, redirect to home
      if (user && !isLoading) {
        return <Redirect to="/" />;
      }
      
      // Login Form
      function LoginForm() {
        const [formData, setFormData] = useState({
          username: "",
          password: "",
        });
        
        const handleChange = (e) => {
          const { name, value } = e.target;
          setFormData(prev => ({
            ...prev,
            [name]: value
          }));
        };
        
        const handleSubmit = (e) => {
          e.preventDefault();
          loginMutation.mutate(formData);
        };
        
        return (
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">Username</label>
              <input
                name="username"
                value={formData.username}
                onChange={handleChange}
                placeholder="Enter your username"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700">Password</label>
              <input
                type="password"
                name="password"
                value={formData.password}
                onChange={handleChange}
                placeholder="Enter your password"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
              />
            </div>
            
            <Button 
              type="submit" 
              className="w-full bg-gradient-to-r from-blue-600 to-blue-500 hover:from-blue-700 hover:to-blue-600"
              disabled={loginMutation.isPending}
            >
              {loginMutation.isPending ? (
                <>
                  <span className="mr-2">
                    <svg className="animate-spin h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                  </span>
                  Logging in...
                </>
              ) : (
                "Login"
              )}
            </Button>
          </form>
        );
      }
      
      // Register Form
      function RegisterForm() {
        const [formData, setFormData] = useState({
          username: "",
          password: "",
          email: "",
          discordUsername: "",
        });
        
        const handleChange = (e) => {
          const { name, value } = e.target;
          setFormData(prev => ({
            ...prev,
            [name]: value
          }));
        };
        
        const handleSubmit = (e) => {
          e.preventDefault();
          registerMutation.mutate(formData);
        };
        
        return (
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">Email</label>
              <input
                name="email"
                value={formData.email}
                onChange={handleChange}
                placeholder="example@email.com"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700">Discord Username</label>
              <input
                name="discordUsername"
                value={formData.discordUsername}
                onChange={handleChange}
                placeholder="Enter your Discord username"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
              />
              <p className="text-xs text-gray-500 mt-1">
                Enter your Discord username
              </p>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700">Username</label>
              <input
                name="username"
                value={formData.username}
                onChange={handleChange}
                placeholder="Choose a username"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700">Password</label>
              <input
                type="password"
                name="password"
                value={formData.password}
                onChange={handleChange}
                placeholder="Choose a password"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
              />
            </div>
            
            <Button 
              type="submit" 
              className="w-full bg-gradient-to-r from-blue-600 to-blue-500 hover:from-blue-700 hover:to-blue-600"
              disabled={registerMutation.isPending}
            >
              {registerMutation.isPending ? (
                <>
                  <span className="mr-2">
                    <svg className="animate-spin h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                  </span>
                  Creating account...
                </>
              ) : (
                "Register"
              )}
            </Button>
          </form>
        );
      }
      
      return (
        <div className="container mx-auto px-4 py-10 flex min-h-screen">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 w-full max-w-5xl mx-auto items-center">
            {/* Left Column - Auth Forms */}
            <div className="w-full">
              <div className="grid w-full grid-cols-2 mb-4 bg-gray-100 p-1 rounded-lg">
                <button
                  className={`px-3 py-1.5 text-sm font-medium rounded-md transition-colors focus:outline-none ${
                    activeTab === "login" 
                      ? "bg-white text-blue-700 shadow"
                      : "text-gray-600 hover:text-blue-700"
                  }`}
                  onClick={() => setActiveTab("login")}
                >
                  Login
                </button>
                <button
                  className={`px-3 py-1.5 text-sm font-medium rounded-md transition-colors focus:outline-none ${
                    activeTab === "register" 
                      ? "bg-white text-blue-700 shadow"
                      : "text-gray-600 hover:text-blue-700"
                  }`}
                  onClick={() => setActiveTab("register")}
                >
                  Register
                </button>
              </div>
              
              {activeTab === "login" ? (
                <Card>
                  <CardHeader>
                    <CardTitle className="text-2xl bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-blue-400">
                      Welcome Back
                    </CardTitle>
                    <CardDescription>
                      Login to your account to redeem Valk XP codes
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <LoginForm />
                  </CardContent>
                </Card>
              ) : (
                <Card>
                  <CardHeader>
                    <CardTitle className="text-2xl bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-blue-400">
                      Create Account
                    </CardTitle>
                    <CardDescription>
                      Register to redeem codes and track your Valk XP rewards
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <RegisterForm />
                  </CardContent>
                </Card>
              )}
            </div>
            
            {/* Right Column - Hero */}
            <div className="hidden md:flex flex-col p-6 bg-gradient-to-br from-blue-50 to-white border rounded-xl shadow-lg">
              <h2 className="text-3xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-blue-400">
                Society of Valk XP
              </h2>
              <p className="text-gray-600 mt-4">
                Login or register to access your account and redeem exclusive XP codes. Track your rewards and never miss an opportunity to level up in the Society of Valk.
              </p>
              <div className="mt-6 space-y-4">
                <div className="flex items-start">
                  <div className="bg-blue-100 rounded-full p-2 mr-4">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-blue-600"><path d="M12 2v4M12 18v4M4.93 4.93l2.83 2.83M16.24 16.24l2.83 2.83M2 12h4M18 12h4M4.93 19.07l2.83-2.83M16.24 7.76l2.83-2.83"/></svg>
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-900">Redeem XP Codes</h3>
                    <p className="text-gray-600 text-sm">Easily redeem your codes to receive Valk XP and other exclusive rewards.</p>
                  </div>
                </div>
                <div className="flex items-start">
                  <div className="bg-blue-100 rounded-full p-2 mr-4">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-blue-600"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M22 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path></svg>
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-900">Track Progress</h3>
                    <p className="text-gray-600 text-sm">Keep track of all your redeemed codes and accumulated rewards.</p>
                  </div>
                </div>
                <div className="flex items-start">
                  <div className="bg-blue-100 rounded-full p-2 mr-4">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-blue-600"><path d="M20 6 9 17l-5-5"></path></svg>
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-900">Exclusive Benefits</h3>
                    <p className="text-gray-600 text-sm">Get access to member-only content and special rewards.</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      );
    }

    function Faq() {
      const faqItems = [
        {
          question: "Where can I find my redemption code?",
          answer: "Redemption codes are typically provided with your purchase confirmation, inside product packaging, or within promotional emails. If you participated in a special event, codes may have been distributed during or after the event."
        },
        {
          question: "My code isn't working, what should I do?",
          answer: "Please check the following: 1) Ensure you've entered the code exactly as it appears (codes are case-insensitive) 2) Check that the code hasn't expired 3) Verify that the code hasn't already been used 4) If you're still having issues, please contact our support team."
        },
        {
          question: "How long do codes remain valid?",
          answer: "Code validity periods vary depending on the promotion or product. Most codes are valid for 30-90 days from the issue date, but some special promotions may have shorter or longer periods. The expiration date is typically provided alongside the code."
        },
        {
          question: "Can I use the same code multiple times?",
          answer: "Most codes can only be used once per account. However, some special event codes may be configured for multiple redemptions. The system will inform you if a code can be redeemed multiple times."
        }
      ];

      return (
        <>
          <TabNavigation />
          <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-10">
            <div className="max-w-3xl mx-auto">
              <h2 className="text-3xl font-bold text-center bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-blue-400 mb-8">
                Frequently Asked Questions
              </h2>
              
              <div className="space-y-6">
                {faqItems.map((item, index) => (
                  <Card key={index} className="shadow-md border border-blue-100 overflow-hidden">
                    <CardContent className="px-6 py-6">
                      <h3 className="text-lg leading-6 font-semibold text-blue-600">
                        {item.question}
                      </h3>
                      <div className="mt-3 text-sm text-gray-600">
                        {item.answer}
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          </main>
        </>
      );
    }

    // Admin components
    function AdminLogin() {
      const { login, isLoading } = useAdmin();
      const { toast } = useToast();
      const [password, setPassword] = useState("");
      
      const handleSubmit = async (e) => {
        e.preventDefault();
        try {
          if (!password) {
            toast({
              title: "Error",
              description: "Password is required",
              variant: "destructive",
            });
            return;
          }
          
          await login(password);
        } catch (error) {
          toast({
            title: "Login failed",
            description: error.message || "Invalid password",
            variant: "destructive",
          });
        }
      };
      
      return (
        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-10">
          <div className="flex justify-center">
            <Card className="w-full max-w-md shadow-lg border border-blue-100">
              <CardHeader className="bg-gradient-to-r from-blue-50 to-white border-b border-blue-100">
                <CardTitle className="text-xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-blue-400">
                  Admin Login
                </CardTitle>
                <CardDescription className="text-gray-600">
                  Enter your admin password to access the management panel.
                </CardDescription>
              </CardHeader>
              <CardContent className="pt-6">
                <form onSubmit={handleSubmit} className="space-y-5">
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Admin Password</label>
                    <input
                      type="password"
                      value={password}
                      onChange={(e) => setPassword(e.target.value)}
                      placeholder="Enter admin password"
                      disabled={isLoading}
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm border-blue-200 focus:ring-blue-500"
                    />
                  </div>
                  
                  <Button
                    type="submit"
                    className="w-full bg-gradient-to-r from-blue-600 to-blue-500 hover:from-blue-700 hover:to-blue-600 text-white font-medium"
                    disabled={isLoading}
                  >
                    {isLoading && (
                      <span className="mr-2">
                        <svg className="animate-spin h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                      </span>
                    )}
                    {isLoading ? "Logging in..." : "Login"}
                  </Button>
                </form>
              </CardContent>
            </Card>
          </div>
        </main>
      );
    }

    function ManageCodes() {
      const [searchQuery, setSearchQuery] = useState("");
      const { toast } = useToast();
      
      const { data: codes = mockCodes, isLoading } = useQuery({
        queryKey: ["/api/admin/codes", searchQuery],
        queryFn: async () => {
          // In a real app, this would fetch from API
          if (!searchQuery) return mockCodes;
          
          const query = searchQuery.toLowerCase();
          return mockCodes.filter(code => 
            code.code.toLowerCase().includes(query) || 
            code.reward.toLowerCase().includes(query)
          );
        }
      });
      
      const toggleStatusMutation = useMutation({
        mutationFn: async (id) => {
          return apiRequest("PATCH", `/api/admin/codes/${id}/toggle`, {});
        },
        onSuccess: () => {
          queryClient.invalidateQueries({ queryKey: ["/api/admin/codes"] });
          toast({
            title: "Status updated",
            description: "Code status has been successfully updated.",
          });
        },
        onError: () => {
          toast({
            title: "Error",
            description: "Failed to update code status. Please try again.",
            variant: "destructive",
          });
        }
      });
      
      const handleToggleStatus = (id) => {
        toggleStatusMutation.mutate(id);
      };
      
      return (
        <>
          <AdminTabNavigation />
          <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-10">
            <Card className="shadow-lg border border-blue-100">
              <CardHeader className="px-6 py-6 sm:px-8 flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 bg-gradient-to-r from-blue-50 to-white border-b border-blue-100">
                <div>
                  <CardTitle className="text-xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-blue-400">Manage Redemption Codes</CardTitle>
                  <CardDescription className="text-gray-600 mt-1">
                    View, edit, and manage all available redemption codes.
                  </CardDescription>
                </div>
                <div className="w-full sm:w-auto">
                  <Input
                    type="text"
                    placeholder="Search codes..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="border-blue-200 focus:ring-blue-500"
                  />
                </div>
              </CardHeader>
              <CardContent className="p-0">
                <div className="overflow-x-auto">
                  {isLoading ? (
                    <div className="flex justify-center items-center p-8">
                      <span className="animate-spin h-8 w-8 text-blue-500">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                      </span>
                    </div>
                  ) : (
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead className="bg-blue-50">
                        <tr>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-blue-700 uppercase tracking-wider">
                            Code
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-blue-700 uppercase tracking-wider">
                            Reward
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-blue-700 uppercase tracking-wider">
                            Expires
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-blue-700 uppercase tracking-wider">
                            Status
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-blue-700 uppercase tracking-wider">
                            Redemptions
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-blue-700 uppercase tracking-wider">
                            Max Uses
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-blue-700 uppercase tracking-wider">
                            Actions
                          </th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {codes && codes.length > 0 ? (
                          codes.map((code) => (
                            <tr key={code.id}>
                              <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                {code.code}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {code.reward}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {code.expiresAt}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {code.isActive ? (
                                  <Badge variant="success">
                                    Active
                                  </Badge>
                                ) : (
                                  <Badge variant="destructive">
                                    Inactive
                                  </Badge>
                                )}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {code.timesRedeemed}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {code.maxRedemptions}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                <Button 
                                  variant="outline" 
                                  size="sm"
                                  onClick={() => handleToggleStatus(code.id)}
                                  className={code.isActive 
                                    ? "border-red-200 text-red-600 hover:bg-red-50" 
                                    : "border-green-200 text-green-600 hover:bg-green-50"}
                                  disabled={toggleStatusMutation.isPending}
                                >
                                  {code.isActive ? 'Deactivate' : 'Activate'}
                                </Button>
                              </td>
                            </tr>
                          ))
                        ) : (
                          <tr>
                            <td colSpan={7} className="px-6 py-4 text-center text-sm text-gray-500">
                              No codes found
                            </td>
                          </tr>
                        )}
                      </tbody>
                    </table>
                  )}
                </div>
              </CardContent>
            </Card>
          </main>
        </>
      );
    }

    function RedemptionStats() {
      const { data: stats = mockStats, isLoading: statsLoading } = useQuery({
        queryKey: ["/api/admin/stats"],
        queryFn: async () => mockStats
      });
      
      const { data: redemptions = mockRedemptions, isLoading: redemptionsLoading } = useQuery({
        queryKey: ["/api/admin/redemptions"],
        queryFn: async () => mockRedemptions
      });
      
      const formatDate = (dateString) => {
        const date = new Date(dateString);
        return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}:${String(date.getSeconds()).padStart(2, '0')}`;
      };
      
      return (
        <>
          <AdminTabNavigation />
          <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-10">
            <Card className="mb-6">
              <CardHeader>
                <CardTitle>Redemption Statistics</CardTitle>
              </CardHeader>
              <CardContent>
                {statsLoading ? (
                  <div className="flex justify-center items-center p-8">
                    <span className="animate-spin h-8 w-8 text-blue-500">
                      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                    </span>
                  </div>
                ) : stats ? (
                  <div className="grid grid-cols-1 gap-5 sm:grid-cols-3">
                    <div className="bg-gray-50 overflow-hidden shadow rounded-lg">
                      <div className="px-4 py-5 sm:p-6">
                        <div className="flex items-center">
                          <div className="flex-shrink-0 bg-blue-500 rounded-md p-3">
                            <svg className="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                            </svg>
                          </div>
                          <div className="ml-5 w-0 flex-1">
                            <dl>
                              <dt className="text-sm font-medium text-gray-500 truncate">
                                Total Redemptions
                              </dt>
                              <dd>
                                <div className="text-lg font-medium text-gray-900">
                                  {stats.totalRedemptions}
                                </div>
                              </dd>
                            </dl>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-gray-50 overflow-hidden shadow rounded-lg">
                      <div className="px-4 py-5 sm:p-6">
                        <div className="flex items-center">
                          <div className="flex-shrink-0 bg-green-500 rounded-md p-3">
                            <svg className="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                          </div>
                          <div className="ml-5 w-0 flex-1">
                            <dl>
                              <dt className="text-sm font-medium text-gray-500 truncate">
                                Active Codes
                              </dt>
                              <dd>
                                <div className="text-lg font-medium text-gray-900">
                                  {stats.activeCodes}
                                </div>
                              </dd>
                            </dl>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="bg-gray-50 overflow-hidden shadow rounded-lg">
                      <div className="px-4 py-5 sm:p-6">
                        <div className="flex items-center">
                          <div className="flex-shrink-0 bg-red-500 rounded-md p-3">
                            <svg className="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                            </svg>
                          </div>
                          <div className="ml-5 w-0 flex-1">
                            <dl>
                              <dt className="text-sm font-medium text-gray-500 truncate">
                                Failed Attempts
                              </dt>
                              <dd>
                                <div className="text-lg font-medium text-gray-900">
                                  {stats.failedAttempts}
                                </div>
                              </dd>
                            </dl>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="text-center py-4">No statistics available</div>
                )}
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Recent Redemptions</CardTitle>
              </CardHeader>
              <CardContent className="p-0">
                {redemptionsLoading ? (
                  <div className="flex justify-center items-center p-8">
                    <span className="animate-spin h-8 w-8 text-blue-500">
                      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                    </span>
                  </div>
                ) : (
                  <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead className="bg-gray-50">
                        <tr>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Date & Time
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Code
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            User
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Status
                          </th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {redemptions && redemptions.length > 0 ? (
                          redemptions.map((redemption) => (
                            <tr key={redemption.id}>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {formatDate(redemption.redeemedAt)}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                {redemption.code}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                {redemption.user ? (
                                  <div className="flex flex-col">
                                    <span className="font-medium">{redemption.user.username}</span>
                                    <span className="text-xs text-gray-500">{redemption.user.email}</span>
                                    <span className="text-xs text-gray-500">{redemption.user.discordUsername}</span>
                                  </div>
                                ) : (
                                  <span className="text-gray-400">Unknown user</span>
                                )}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap">
                                {redemption.status === "success" ? (
                                  <Badge variant="success">
                                    Success
                                  </Badge>
                                ) : (
                                  <Badge variant="destructive">
                                    Failed
                                  </Badge>
                                )}
                              </td>
                            </tr>
                          ))
                        ) : (
                          <tr>
                            <td colSpan={4} className="px-6 py-4 text-center text-sm text-gray-500">
                              No redemptions found
                            </td>
                          </tr>
                        )}
                      </tbody>
                    </table>
                  </div>
                )}
              </CardContent>
            </Card>
          </main>
        </>
      );
    }

    function AddCodes() {
      const [generatedCodes, setGeneratedCodes] = useState([]);
      const [formData, setFormData] = useState({
        prefix: "VALID",
        count: 5,
        reward: "",
        expiresAt: "",
        pattern: "random",
        maxRedemptions: 1
      });
      const { toast } = useToast();
      
      const handleInputChange = (e) => {
        const { name, value } = e.target;
        let processedValue = value;
        
        // Handle number inputs
        if (name === "count" || name === "maxRedemptions") {
          processedValue = parseInt(value) || 1;
        }
        
        setFormData(prev => ({
          ...prev,
          [name]: processedValue
        }));
      };
      
      const generateMutation = useMutation({
        mutationFn: async (values) => {
          // Mock implementation
          const now = new Date();
          const expiresDate = new Date(values.expiresAt);
          
          // Generate the codes
          const newCodes = [];
          for (let i = 0; i < values.count; i++) {
            const suffix = values.pattern === "random" 
              ? Math.random().toString(36).substring(2, 7).toUpperCase()
              : (i + 1).toString().padStart(3, '0');
              
            newCodes.push({
              id: Date.now() + i,
              code: `${values.prefix}${suffix}`,
              reward: values.reward,
              expiresAt: expiresDate.toISOString().split('T')[0],
              isActive: true,
              timesRedeemed: 0,
              maxRedemptions: values.maxRedemptions
            });
          }
          
          return newCodes;
        },
        onSuccess: (data) => {
          setGeneratedCodes(data);
          toast({
            title: "Codes generated",
            description: `Successfully generated ${data.length} new code(s).`,
          });
        },
        onError: (error) => {
          toast({
            title: "Error",
            description: error.message || "Failed to generate codes. Please try again.",
            variant: "destructive",
          });
        }
      });
      
      const handleSubmit = (e) => {
        e.preventDefault();
        
        // Validate form
        if (!formData.reward) {
          toast({
            title: "Error",
            description: "Reward is required",
            variant: "destructive",
          });
          return;
        }
        
        if (!formData.expiresAt) {
          toast({
            title: "Error",
            description: "Expiration date is required",
            variant: "destructive",
          });
          return;
        }
        
        generateMutation.mutate(formData);
      };
      
      return (
        <>
          <AdminTabNavigation />
          <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-10">
            <Card className="mb-6">
              <CardHeader className="px-4 py-5 sm:px-6">
                <CardTitle>Generate New Redemption Codes</CardTitle>
                <CardDescription>
                  Create new batches of codes for distribution.
                </CardDescription>
              </CardHeader>
              <CardContent className="px-4 py-5 sm:p-6">
                <form onSubmit={handleSubmit} className="space-y-6">
                  <div className="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
                    <div className="sm:col-span-2">
                      <label className="block text-sm font-medium text-gray-700">Code Prefix</label>
                      <input
                        name="prefix"
                        value={formData.prefix}
                        onChange={handleInputChange}
                        className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                        required
                      />
                    </div>

                    <div className="sm:col-span-1">
                      <label className="block text-sm font-medium text-gray-700">Number of Codes</label>
                      <input 
                        type="number" 
                        min="1"
                        max="100"
                        name="count"
                        value={formData.count}
                        onChange={handleInputChange}
                        className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                        required
                      />
                    </div>

                    <div className="sm:col-span-3">
                      <label className="block text-sm font-medium text-gray-700">Generation Pattern</label>
                      <select
                        name="pattern"
                        value={formData.pattern}
                        onChange={handleInputChange}
                        className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                      >
                        <option value="random">Random Characters</option>
                        <option value="sequential">Sequential Numbers</option>
                      </select>
                    </div>

                    <div className="sm:col-span-3">
                      <label className="block text-sm font-medium text-gray-700">Reward</label>
                      <input 
                        name="reward"
                        value={formData.reward}
                        onChange={handleInputChange}
                        placeholder="e.g., Premium Membership (30 days)"
                        className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                        required
                      />
                    </div>

                    <div className="sm:col-span-3">
                      <label className="block text-sm font-medium text-gray-700">Expiration Date</label>
                      <input 
                        type="date" 
                        name="expiresAt"
                        value={formData.expiresAt}
                        onChange={handleInputChange}
                        className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                        required
                      />
                    </div>

                    <div className="sm:col-span-3">
                      <label className="block text-sm font-medium text-gray-700">Maximum Redemptions</label>
                      <input 
                        type="number" 
                        min="1"
                        max="100"
                        name="maxRedemptions"
                        value={formData.maxRedemptions}
                        onChange={handleInputChange}
                        placeholder="Default: 1 (Single-use)"
                        className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                        required
                      />
                      <p className="text-xs text-gray-500 mt-1">
                        Number of times this code can be redeemed before becoming inactive
                      </p>
                    </div>
                  </div>

                  <div className="pt-5">
                    <div className="flex justify-end">
                      <Button
                        type="submit"
                        disabled={generateMutation.isPending}
                      >
                        {generateMutation.isPending && (
                          <span className="mr-2">
                            <svg className="animate-spin h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                          </span>
                        )}
                        Generate Codes
                      </Button>
                    </div>
                  </div>
                </form>
              </CardContent>
            </Card>

            {generatedCodes.length > 0 && (
              <Card>
                <CardHeader className="px-4 py-5 sm:px-6 flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4">
                  <div>
                    <CardTitle>Generated Codes</CardTitle>
                    <CardDescription>
                      {generatedCodes.length} new codes have been generated.
                    </CardDescription>
                  </div>
                  <div>
                    <Button variant="outline">
                      Export CSV
                    </Button>
                  </div>
                </CardHeader>
                <CardContent className="p-0">
                  <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead className="bg-gray-50">
                        <tr>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Code
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Reward
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Expires
                          </th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Max Uses
                          </th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {generatedCodes.map((code) => (
                          <tr key={code.id}>
                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                              {code.code}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                              {code.reward}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                              {code.expiresAt}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                              {code.maxRedemptions}
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </CardContent>
              </Card>
            )}
          </main>
        </>
      );
    }

    function NotFound() {
      return (
        <div className="min-h-screen flex items-center justify-center">
          <div className="max-w-md w-full text-center p-6">
            <h1 className="text-3xl font-bold text-blue-600 mb-4">404 - Page Not Found</h1>
            <p className="text-gray-600 mb-8">
              The page you are looking for does not exist. It might have been moved or deleted.
            </p>
            <Link href="/" className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700">
              Return to Home
            </Link>
          </div>
        </div>
      );
    }

    // App component with routes
    function App() {
      return (
        <QueryClientProvider client={queryClient}>
          <AdminProvider>
            <AuthProvider>
              <ToastProvider>
                <div className="min-h-screen flex flex-col bg-gray-100">
                  <Header />
                  <div className="flex-grow">
                    <Switch>
                      <Route path="/auth" component={AuthPage} />
                      <ProtectedRoute path="/" component={Home} />
                      <ProtectedRoute path="/faq" component={Faq} />
                      <Route path="/admin/login" component={AdminLogin} />
                      <AdminRoute path="/admin/manage">
                        <ManageCodes />
                      </AdminRoute>
                      <AdminRoute path="/admin/stats">
                        <RedemptionStats />
                      </AdminRoute>
                      <AdminRoute path="/admin/add">
                        <AddCodes />
                      </AdminRoute>
                      <Route component={NotFound} />
                    </Switch>
                  </div>
                  <Footer />
                </div>
              </ToastProvider>
            </AuthProvider>
          </AdminProvider>
        </QueryClientProvider>
      );
    }

    // Mount the app
    const root = createRoot(document.getElementById('root'));
    root.render(<App />);
  </script>
</body>
</html>